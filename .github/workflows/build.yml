name: Release

on:
  push:
    tags:
      - v*

permissions:
  contents: write

jobs:
  release:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os:
          - ubuntu-latest
          - windows-latest

    steps:
      - name: Checkout Git repository
        uses: actions/checkout@v2

      - name: Install Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22' # Consider using latest stable version

      - name: Setup Go Environment
        run: |
          go version
          echo "GOPATH=$(go env GOPATH)" >> $GITHUB_ENV

      - name: Setup distutils
        if: matrix.os != 'windows-latest'
        run: sudo -H pip install setuptools

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.9.0' # Consider using latest LTS version

      - name: Install dependencies
        run: npm install

      - name: Update locale
        run: npm run update:locale
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}

      # - name: Update Deps
      #   run: npm run build:deps

      - name: Update Addon Windows
        if: matrix.os == 'windows-latest'
        run: ./update-ci.sh ${{ secrets.USER }} ${{ secrets.TOKEN }} ${{ matrix.os }}
        shell: bash

      - name: Update Addon Linux
        if: matrix.os != 'windows-latest'
        run: |
          ./update-ci.sh ${{ secrets.USER }} ${{ secrets.TOKEN }} ${{ matrix.os }} arm
          ./update-ci.sh ${{ secrets.USER }} ${{ secrets.TOKEN }} ${{ matrix.os }} amd
        shell: bash

      - name: Build Native Messaging Host Windows
        if: matrix.os == 'windows-latest'
        run: npm run build:nmh-win
        env:
          CGO_ENABLED: 0

      - name: Build Native Messaging Host Linux
        if: matrix.os != 'windows-latest'
        run: npm run build:nmh
        env:
          CGO_ENABLED: 0

      - name: Build Front
        uses: samuelmeuli/action-electron-builder@v1
        with:
          github_token: ${{ secrets.TOKEN }}
          release: ${{ startsWith(github.ref, 'refs/tags/v') }}
        env:
          DEBUG: electron-builder
          USE_HARD_LINKS: false
          GITHUB_TOKEN: ${{ secrets.TOKEN }}

      - name: Package Artifacts
        run: |
          mkdir -p artifacts
          mv dist/* artifacts || true

      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: artifacts/**
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}

      - name: Delete old releases
        uses: dev-drprasad/delete-older-releases@v0.2.0
        with:
          keep_latest: 3
          delete_tag_pattern: alpha
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
